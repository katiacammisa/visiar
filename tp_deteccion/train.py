from sklearn import tree
from joblib import dump
from math import copysign, log10


def train():
    X = [
        [1.74950351e-01, 1.54292234e-03, 1.03139333e-03, 1.12130590e-05, -1.20580364e-09, -4.40434885e-07,
         -1.20621407e-11],
        [1.76501833e-01, 1.31397923e-03, 1.30503039e-03, 1.71985875e-05, -2.57593347e-09, -6.23405307e-07,
         -5.92462086e-11],
        [1.70626439e-01, 9.31295316e-04, 7.58237613e-04, 2.65276508e-06, -1.18973668e-10, -8.09547808e-08,
         -1.64358720e-22],
        [1.68227461e-01, 6.98300067e-04, 5.79051452e-04, 6.97582726e-06, -4.43353870e-10, -1.84338618e-07,
         -1.22240516e-12],
        [1.65640784e-01, 1.49810436e-04, 5.55178608e-04, 3.06566025e-07, -3.99943169e-12, -3.75227734e-09,
         -1.74069784e-14],
        [1.70626427e-01, 8.92589159e-04, 7.74419491e-04, 2.76703349e-06, -1.28088388e-10, -8.26685309e-08,
         -5.92955629e-22],
        [1.70345269e-01, 1.18426537e-03, 6.73036420e-04, 9.31969514e-06, -7.38097312e-10, -3.20716919e-07,
         -4.54073329e-12],
        [1.90068074e-01, 4.05053721e-03, 1.66113022e-03, 4.04680364e-05, -1.04919870e-08, -2.57553593e-06,
         -7.89434568e-11],
        [2.04945430e-01, 7.49252271e-03, 2.37776138e-03, 1.07355423e-04, -5.42191549e-08, -9.29010017e-06,
         1.50557197e-09],
        [2.11304671e-01, 5.43050763e-03, 3.88763646e-03, 1.48525679e-04, -1.12861092e-07, -1.09451510e-05,
         2.28768923e-10],
        [2.48382225e-01, 1.10881206e-02, 7.37289893e-03, 4.72092003e-04, -8.80488373e-07, -4.97075967e-05,
         -2.19964394e-08],

        # 2
        [0.21446677, 3.71502309e-07, 3.21264829e-07, 3.12294815e-09, 9.89042735e-17, -1.32511242e-12, -1.69404435e-18],
        [0.18024388, 1.03589651e-08, 3.3081496e-10, 8.51866079e-13, 5.45488416e-24, 6.06381762e-17, 1.32191895e-23],
        [0.22024175, 0.00191052, 0.00024335, 1.90309338e-05, -1.61702065e-10, 4.73359349e-07, 1.28497391e-09],
        [0.21599516, 1.40982512e-07, 1.12885788e-07, 1.5286976e-11, -2.00812768e-20, -3.19456049e-15, 1.40897288e-22],
        [0.187653, 4.43780168e-10, 6.66209682e-11, 2.20514789e-12, -2.65004874e-23, 4.61187066e-17, -3.47787779e-24],
        [0.17277955, 6.10782215e-07, 1.62898959e-07, 5.12154356e-08, -4.6093345e-15, 2.26146527e-11, 7.98588769e-16],
        [0.18307552, 0.00024997, 1.14160666e-09, 2.79668039e-11, -3.46219385e-21, 1.79271231e-13, 3.60343381e-21],
        [0.17478539, 4.14149936e-05, 6.40224185e-05, 7.16718578e-06, -1.52811216e-10, 2.46330555e-08, -1.4823468e-11],
        [0.23156198, 0.00018341, 0.00018012, 2.18403068e-07, -8.41338195e-13, 1.12603986e-09, 1.08100438e-12],
        [0.23915566, 0.00802761, 0.00082372, 0.0004759, 2.63325936e-07, 3.50362748e-05, 1.39433325e-07],
        [0.21597757, 1.58516352e-07, 1.81219802e-07, 9.40479571e-12, 8.01759201e-21, 3.23057824e-15, 9.2987622e-21],
        [0.21393744, 7.73535091e-05, 9.29322254e-05, 2.28110664e-06, -2.94453588e-12, -1.8143554e-08, -3.30817138e-11],
        # 3
        [1.66693871e-01, 9.74273397e-06, 3.40025341e-12, 3.69066561e-13, 4.13136427e-25, -2.32348588e-17,
         1.58455581e-26],
        [1.66666667e-01, 2.11758237e-22, 7.37428684e-16, 2.50727269e-15, 3.37317717e-30, -3.23105239e-26,
         4.94822844e-31],
        [1.66666099e-01, 1.22501500e-09, 2.56863856e-11, 3.07606528e-12, -2.73429155e-23, 1.07662944e-16,
         5.39842842e-34],
        [1.85185185e-01, 8.57338821e-03, 3.60886732e-16, 2.74022060e-16, 8.60463237e-32, -2.33616567e-17,
         4.64336690e-33],
        [1.66666667e-01, 9.43705673e-33, 1.21408274e-31, 1.27728878e-31, 1.32138220e-62, -2.37929663e-48,
         -8.85392724e-63],
        [1.68411160e-01, 8.52053444e-05, 2.57715800e-05, 6.24003695e-07, 8.77383154e-14, 3.01353651e-09,
         -2.50082989e-12],
        [1.69572686e-01, 1.04157039e-04, 4.34337993e-06, 2.45388948e-07, 5.12976282e-14, 2.32529850e-09,
         -2.48087756e-13],
        [1.67181115e-01, 1.61208737e-04, 6.88327423e-06, 8.32924127e-08, 4.38890927e-14, 3.77709266e-10,
         -4.52908228e-14],
        [1.68933217e-01, 2.01395155e-04, 3.84836229e-06, 1.34546706e-07, 9.68012856e-14, 1.83052477e-09,
         1.69356854e-15],
        [8.39257480e-01, 1.39420805e-02, 6.60752945e-04, 1.75028597e-04, -4.58119192e-08, -2.05170581e-05,
         -3.80029895e-08],
        [1.68916758e-01, 2.69401845e-04, 3.20147441e-05, 1.11905125e-06, 4.08578062e-12, 1.76859861e-08,
         -5.30759842e-12]

    ]

    X2 = []
    for a in X:
        X2.append(convert(a))

    Y = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
         3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]

    classifier = tree.DecisionTreeClassifier().fit(X2, Y)

    tree.plot_tree(classifier)

    dump(classifier, 'training.joblib')

    # recoveredClassifier = load('training.joblib')


def convert(hu_moments):
    for i in range(len(hu_moments)):
        hu_moments[i] = -1 * copysign(1.0, hu_moments[i]) * log10(abs(hu_moments[i]))
    return hu_moments


train()
